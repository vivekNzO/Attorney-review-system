// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model Role{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  roleName String @unique
  users User[]
}

enum UserStatus {
  Approved
  Pending
  Rejected
}

model User{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  firstName String
  lastName String
  email String @unique
  password String
  role Role @relation(fields: [roleId], references: [id])
  roleId String @db.ObjectId  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status UserStatus @default(Approved)
  attorney Attorney?
  client Client?
  licenseNumber String?
  profilePhoto String?
}

model Attorney{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  user User @relation(fields: [userId],references: [id])
  userId String @unique @db.ObjectId
  attorneyClientMapping AttorneyClientMapping[]
  description String?
  licenseNumber String?
  contactNumber Int?
  reviews Review[]
}

model Client{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  user User @relation(fields: [userId],references: [id])
  userId String @unique @db.ObjectId
  attorneyClientMapping AttorneyClientMapping[]
  reviews Review[]
}

// model Attorney{
//   id String @id @map("_id") @default(auto()) @db.ObjectId
//   user User @relation(fields: [userId],references: [id])
//   userId String @unique @db.ObjectId
//   attorneyClientMapping AttorneyClientMapping[]
//   description String?
//   licenseNumber Int?
//   contactNumber Int?
//   clients Client[] @relation(fields: [clientIds],references: [id])
//   clientIds String[] @db.ObjectId
//   reviews Review[]
// }

// model Client{
//   id String @id @map("_id") @default(auto()) @db.ObjectId
//   user User @relation(fields: [userId],references: [id])
//   userId String @unique @db.ObjectId
//   attorneyClientMapping AttorneyClientMapping[]
//   // attorney Attorney @relation(fields: [attorneyId],references: [id])
//   attorneys Attorney[] @relation(fields: [attorneyId],references: [id])
//   attorneyId String[] @db.ObjectId
//   reviews Review[]
// }


model AttorneyClientMapping{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  attorney Attorney? @relation(fields: [attorneyId], references: [id])
  attorneyId String @db.ObjectId
  client Client? @relation(fields: [clientId],references: [id])
  clientId String @db.ObjectId
  createdAt DateTime @default(now())
}

model Review{
  id String @id @map("_id") @default(auto()) @db.ObjectId
  attorney Attorney @relation(fields: [attorneyId],references: [id])
  attorneyId String @db.ObjectId
  client Client @relation(fields: [clientId],references: [id])
  clientId String @db.ObjectId
  punctuality Int
  behaviour Int
  paymentTimeliness Int
  preparedness Int
  reliability Int
}

